1. Every thread should have a MutatorContext:
Output via Log in MMTk requires getting a current context (binded with thread)

2. Plan instance should be created after class initialization:
Plan constructor will call Map.finalizeStaticSpaceMap(), and set sharedFLMap. sharedFLMap is created during class initialization. 

[WRONG]3. Runtime needs to be able to control MMTk's GC point:
MMTk's slow allocation loop won't end until the allocation is successful. So runtime needs to be able to insert GC point into this allocation loop, otherwise the loop will keep running and request GC when MMTk is already doing GC. This will cause at least two subsequent GC being triggered whenever a GC is needed. 
-> note @Uninterruptible code. MMTk doesn't require GC point in those code

[FIXED]4. metaDataSpace/sanitySpace
metaDataSpace needs to have buffer pages before entering a GC. Otherwise, during a GC, when processing nodes, deque would require memory and cause a failure. See TraceLocal.processNode().
-> fixed after updating to newer version

Changes to current MMTk
1. Factory creation is not based on Class name (avoid dynamic class loading)
2. SpecializedScanMethod is not registered as Class<?> Type (use String instead)
3. Hard-code collector class with every plan, so respawning collector context won't involve dynamic class loading
4. ReferenceProcessor.Semantic and Stats.Phase is removed (avoid using enum)
